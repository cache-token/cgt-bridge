/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface CacheGoldChildInterface extends ethers.utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "FEE_ENFORCER_ROLE()": FunctionFragment;
    "INACTIVE_THRESHOLD_DAYS()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "balanceOfNoFees(address)": FunctionFragment;
    "burn(address,uint256)": FunctionFragment;
    "calcInactiveFee(address)": FunctionFragment;
    "calcOwedFees(address)": FunctionFragment;
    "calcStorageFee(address)": FunctionFragment;
    "calcTransferFee(address,uint256)": FunctionFragment;
    "connectedToken()": FunctionFragment;
    "daysSinceActivity(address)": FunctionFragment;
    "daysSincePaidStorageFee(address)": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "forcePayFees(address)": FunctionFragment;
    "fxManager()": FunctionFragment;
    "getFeeAddress()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "initialize(address,address,address,address,address)": FunctionFragment;
    "isAllFeeExempt(address)": FunctionFragment;
    "isInactive(address)": FunctionFragment;
    "isStorageFeeExempt(address)": FunctionFragment;
    "isTransferFeeExempt(address)": FunctionFragment;
    "maximumTransferAmount(address)": FunctionFragment;
    "mint(address,uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "payStorageFee()": FunctionFragment;
    "redeemAddress()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setAccountInactive(address)": FunctionFragment;
    "setFeeAddress(address)": FunctionFragment;
    "setFeeExempt(address)": FunctionFragment;
    "setFxManager(address)": FunctionFragment;
    "setRedeemAddress(address)": FunctionFragment;
    "setStorageFeeExempt(address)": FunctionFragment;
    "setStorageFeeGracePeriodDays(uint256)": FunctionFragment;
    "setTransferFeeBasisPoints(uint256)": FunctionFragment;
    "setTransferFeeExempt(address)": FunctionFragment;
    "storageFee(uint256,uint256)": FunctionFragment;
    "storageFeeGracePeriodDays()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalCirculation()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFeeBasisPoints()": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "unsetFeeExempt(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FEE_ENFORCER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INACTIVE_THRESHOLD_DAYS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "balanceOfNoFees",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calcInactiveFee",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "calcOwedFees",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "calcStorageFee",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "calcTransferFee",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "connectedToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "daysSinceActivity",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "daysSincePaidStorageFee",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "forcePayFees",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "fxManager", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getFeeAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isAllFeeExempt",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "isInactive", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isStorageFeeExempt",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isTransferFeeExempt",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "maximumTransferAmount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "payStorageFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeemAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setAccountInactive",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeExempt",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setFxManager",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setRedeemAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setStorageFeeExempt",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setStorageFeeGracePeriodDays",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTransferFeeBasisPoints",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTransferFeeExempt",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "storageFee",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "storageFeeGracePeriodDays",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalCirculation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFeeBasisPoints",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unsetFeeExempt",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FEE_ENFORCER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "INACTIVE_THRESHOLD_DAYS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfNoFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calcInactiveFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcOwedFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcStorageFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcTransferFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "connectedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "daysSinceActivity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "daysSincePaidStorageFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forcePayFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fxManager", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getFeeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isAllFeeExempt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isInactive", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isStorageFeeExempt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTransferFeeExempt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maximumTransferAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "payStorageFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAccountInactive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeExempt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFxManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRedeemAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStorageFeeExempt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStorageFeeGracePeriodDays",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTransferFeeBasisPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTransferFeeExempt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "storageFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "storageFeeGracePeriodDays",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalCirculation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFeeBasisPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unsetFeeExempt",
    data: BytesLike
  ): Result;

  events: {
    "AccountInactive(address,uint256)": EventFragment;
    "AccountReActive(address)": EventFragment;
    "AddressChange(string,address)": EventFragment;
    "Approval(address,address,uint256)": EventFragment;
    "FeeChange(string,uint256)": EventFragment;
    "Mint(uint256,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "withdrawBurn(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AccountInactive"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AccountReActive"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddressChange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeChange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Mint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "withdrawBurn"): EventFragment;
}

export type AccountInactiveEvent = TypedEvent<
  [string, BigNumber] & { account: string; feePerYear: BigNumber }
>;

export type AccountReActiveEvent = TypedEvent<[string] & { account: string }>;

export type AddressChangeEvent = TypedEvent<
  [string, string] & { addressType: string; account: string }
>;

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber] & {
    owner: string;
    spender: string;
    value: BigNumber;
  }
>;

export type FeeChangeEvent = TypedEvent<
  [string, BigNumber] & { feeType: string; fee: BigNumber }
>;

export type MintEvent = TypedEvent<
  [BigNumber, string] & { amount: BigNumber; user: string }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string] & {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
>;

export type RoleGrantedEvent = TypedEvent<
  [string, string, string] & { role: string; account: string; sender: string }
>;

export type RoleRevokedEvent = TypedEvent<
  [string, string, string] & { role: string; account: string; sender: string }
>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber] & { from: string; to: string; value: BigNumber }
>;

export type withdrawBurnEvent = TypedEvent<
  [string, BigNumber] & { _from: string; _amount: BigNumber }
>;

export class CacheGoldChild extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: CacheGoldChildInterface;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    FEE_ENFORCER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    INACTIVE_THRESHOLD_DAYS(overrides?: CallOverrides): Promise<[BigNumber]>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceOfNoFees(
      owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    burn(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    calcInactiveFee(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calcOwedFees(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calcStorageFee(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calcTransferFee(
      account: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    connectedToken(overrides?: CallOverrides): Promise<[string]>;

    daysSinceActivity(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    daysSincePaidStorageFee(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    forcePayFees(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fxManager(overrides?: CallOverrides): Promise<[string]>;

    getFeeAddress(overrides?: CallOverrides): Promise<[string]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      __feeAddress: string,
      __feeEnforcer: string,
      __fxManager_: string,
      __connectedToken: string,
      __redeemAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isAllFeeExempt(
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isInactive(account: string, overrides?: CallOverrides): Promise<[boolean]>;

    isStorageFeeExempt(
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isTransferFeeExempt(
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    maximumTransferAmount(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    mint(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    payStorageFee(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeemAddress(overrides?: CallOverrides): Promise<[string]>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAccountInactive(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeeAddress(
      newFeeAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeeExempt(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFxManager(
      __fxManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRedeemAddress(
      newRedeemAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStorageFeeExempt(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStorageFeeGracePeriodDays(
      daysGracePeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTransferFeeBasisPoints(
      fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTransferFeeExempt(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    storageFee(
      balance: BigNumberish,
      daysSinceStoragePaid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    storageFeeGracePeriodDays(overrides?: CallOverrides): Promise<[BigNumber]>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalCirculation(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFeeBasisPoints(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferFrom(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unsetFeeExempt(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  FEE_ENFORCER_ROLE(overrides?: CallOverrides): Promise<string>;

  INACTIVE_THRESHOLD_DAYS(overrides?: CallOverrides): Promise<BigNumber>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  balanceOfNoFees(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  burn(
    account: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  calcInactiveFee(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calcOwedFees(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  calcStorageFee(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calcTransferFee(
    account: string,
    value: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  connectedToken(overrides?: CallOverrides): Promise<string>;

  daysSinceActivity(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  daysSincePaidStorageFee(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  forcePayFees(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fxManager(overrides?: CallOverrides): Promise<string>;

  getFeeAddress(overrides?: CallOverrides): Promise<string>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    __feeAddress: string,
    __feeEnforcer: string,
    __fxManager_: string,
    __connectedToken: string,
    __redeemAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isAllFeeExempt(account: string, overrides?: CallOverrides): Promise<boolean>;

  isInactive(account: string, overrides?: CallOverrides): Promise<boolean>;

  isStorageFeeExempt(
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isTransferFeeExempt(
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  maximumTransferAmount(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  mint(
    user: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  payStorageFee(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeemAddress(overrides?: CallOverrides): Promise<string>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAccountInactive(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeeAddress(
    newFeeAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeeExempt(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFxManager(
    __fxManager: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRedeemAddress(
    newRedeemAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStorageFeeExempt(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStorageFeeGracePeriodDays(
    daysGracePeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTransferFeeBasisPoints(
    fee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTransferFeeExempt(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  storageFee(
    balance: BigNumberish,
    daysSinceStoragePaid: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  storageFeeGracePeriodDays(overrides?: CallOverrides): Promise<BigNumber>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalCirculation(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFeeBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

  transferFrom(
    from: string,
    to: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unsetFeeExempt(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    FEE_ENFORCER_ROLE(overrides?: CallOverrides): Promise<string>;

    INACTIVE_THRESHOLD_DAYS(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfNoFees(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burn(
      account: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    calcInactiveFee(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcOwedFees(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcStorageFee(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcTransferFee(
      account: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    connectedToken(overrides?: CallOverrides): Promise<string>;

    daysSinceActivity(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    daysSincePaidStorageFee(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    forcePayFees(account: string, overrides?: CallOverrides): Promise<boolean>;

    fxManager(overrides?: CallOverrides): Promise<string>;

    getFeeAddress(overrides?: CallOverrides): Promise<string>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      __feeAddress: string,
      __feeEnforcer: string,
      __fxManager_: string,
      __connectedToken: string,
      __redeemAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isAllFeeExempt(
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isInactive(account: string, overrides?: CallOverrides): Promise<boolean>;

    isStorageFeeExempt(
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isTransferFeeExempt(
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    maximumTransferAmount(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mint(
      user: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    payStorageFee(overrides?: CallOverrides): Promise<boolean>;

    redeemAddress(overrides?: CallOverrides): Promise<string>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setAccountInactive(
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setFeeAddress(
      newFeeAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setFeeExempt(account: string, overrides?: CallOverrides): Promise<void>;

    setFxManager(__fxManager: string, overrides?: CallOverrides): Promise<void>;

    setRedeemAddress(
      newRedeemAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setStorageFeeExempt(
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setStorageFeeGracePeriodDays(
      daysGracePeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTransferFeeBasisPoints(
      fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTransferFeeExempt(
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    storageFee(
      balance: BigNumberish,
      daysSinceStoragePaid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    storageFeeGracePeriodDays(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalCirculation(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFeeBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    unsetFeeExempt(account: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "AccountInactive(address,uint256)"(
      account?: string | null,
      feePerYear?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { account: string; feePerYear: BigNumber }
    >;

    AccountInactive(
      account?: string | null,
      feePerYear?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { account: string; feePerYear: BigNumber }
    >;

    "AccountReActive(address)"(
      account?: string | null
    ): TypedEventFilter<[string], { account: string }>;

    AccountReActive(
      account?: string | null
    ): TypedEventFilter<[string], { account: string }>;

    "AddressChange(string,address)"(
      addressType?: null,
      account?: string | null
    ): TypedEventFilter<
      [string, string],
      { addressType: string; account: string }
    >;

    AddressChange(
      addressType?: null,
      account?: string | null
    ): TypedEventFilter<
      [string, string],
      { addressType: string; account: string }
    >;

    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; spender: string; value: BigNumber }
    >;

    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; spender: string; value: BigNumber }
    >;

    "FeeChange(string,uint256)"(
      feeType?: null,
      fee?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { feeType: string; fee: BigNumber }
    >;

    FeeChange(
      feeType?: null,
      fee?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { feeType: string; fee: BigNumber }
    >;

    "Mint(uint256,address)"(
      amount?: null,
      user?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { amount: BigNumber; user: string }
    >;

    Mint(
      amount?: null,
      user?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { amount: BigNumber; user: string }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; previousAdminRole: string; newAdminRole: string }
    >;

    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; previousAdminRole: string; newAdminRole: string }
    >;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; value: BigNumber }
    >;

    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; value: BigNumber }
    >;

    "withdrawBurn(address,uint256)"(
      _from?: null,
      _amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { _from: string; _amount: BigNumber }
    >;

    withdrawBurn(
      _from?: null,
      _amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { _from: string; _amount: BigNumber }
    >;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    FEE_ENFORCER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    INACTIVE_THRESHOLD_DAYS(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfNoFees(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burn(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    calcInactiveFee(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcOwedFees(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcStorageFee(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcTransferFee(
      account: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    connectedToken(overrides?: CallOverrides): Promise<BigNumber>;

    daysSinceActivity(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    daysSincePaidStorageFee(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    forcePayFees(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fxManager(overrides?: CallOverrides): Promise<BigNumber>;

    getFeeAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      __feeAddress: string,
      __feeEnforcer: string,
      __fxManager_: string,
      __connectedToken: string,
      __redeemAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isAllFeeExempt(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isInactive(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    isStorageFeeExempt(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isTransferFeeExempt(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maximumTransferAmount(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mint(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    payStorageFee(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeemAddress(overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAccountInactive(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeeAddress(
      newFeeAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeeExempt(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFxManager(
      __fxManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRedeemAddress(
      newRedeemAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStorageFeeExempt(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStorageFeeGracePeriodDays(
      daysGracePeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTransferFeeBasisPoints(
      fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTransferFeeExempt(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    storageFee(
      balance: BigNumberish,
      daysSinceStoragePaid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    storageFeeGracePeriodDays(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalCirculation(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFeeBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unsetFeeExempt(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    FEE_ENFORCER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    INACTIVE_THRESHOLD_DAYS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfNoFees(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burn(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    calcInactiveFee(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcOwedFees(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcStorageFee(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcTransferFee(
      account: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    connectedToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    daysSinceActivity(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    daysSincePaidStorageFee(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    forcePayFees(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fxManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFeeAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      __feeAddress: string,
      __feeEnforcer: string,
      __fxManager_: string,
      __connectedToken: string,
      __redeemAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isAllFeeExempt(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isInactive(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isStorageFeeExempt(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTransferFeeExempt(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maximumTransferAmount(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    payStorageFee(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeemAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAccountInactive(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeeAddress(
      newFeeAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeeExempt(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFxManager(
      __fxManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRedeemAddress(
      newRedeemAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStorageFeeExempt(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStorageFeeGracePeriodDays(
      daysGracePeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTransferFeeBasisPoints(
      fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTransferFeeExempt(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    storageFee(
      balance: BigNumberish,
      daysSinceStoragePaid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    storageFeeGracePeriodDays(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalCirculation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFeeBasisPoints(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unsetFeeExempt(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
