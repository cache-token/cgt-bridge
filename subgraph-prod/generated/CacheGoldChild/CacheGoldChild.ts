// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AccountInactive extends ethereum.Event {
  get params(): AccountInactive__Params {
    return new AccountInactive__Params(this);
  }
}

export class AccountInactive__Params {
  _event: AccountInactive;

  constructor(event: AccountInactive) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get feePerYear(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class AccountReActive extends ethereum.Event {
  get params(): AccountReActive__Params {
    return new AccountReActive__Params(this);
  }
}

export class AccountReActive__Params {
  _event: AccountReActive;

  constructor(event: AccountReActive) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class AddressChange extends ethereum.Event {
  get params(): AddressChange__Params {
    return new AddressChange__Params(this);
  }
}

export class AddressChange__Params {
  _event: AddressChange;

  constructor(event: AddressChange) {
    this._event = event;
  }

  get addressType(): string {
    return this._event.parameters[0].value.toString();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class FeeChange extends ethereum.Event {
  get params(): FeeChange__Params {
    return new FeeChange__Params(this);
  }
}

export class FeeChange__Params {
  _event: FeeChange;

  constructor(event: FeeChange) {
    this._event = event;
  }

  get feeType(): string {
    return this._event.parameters[0].value.toString();
  }

  get fee(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Mint extends ethereum.Event {
  get params(): Mint__Params {
    return new Mint__Params(this);
  }
}

export class Mint__Params {
  _event: Mint;

  constructor(event: Mint) {
    this._event = event;
  }

  get amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RoleAdminChanged extends ethereum.Event {
  get params(): RoleAdminChanged__Params {
    return new RoleAdminChanged__Params(this);
  }
}

export class RoleAdminChanged__Params {
  _event: RoleAdminChanged;

  constructor(event: RoleAdminChanged) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get previousAdminRole(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get newAdminRole(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class RoleGranted extends ethereum.Event {
  get params(): RoleGranted__Params {
    return new RoleGranted__Params(this);
  }
}

export class RoleGranted__Params {
  _event: RoleGranted;

  constructor(event: RoleGranted) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoleRevoked extends ethereum.Event {
  get params(): RoleRevoked__Params {
    return new RoleRevoked__Params(this);
  }
}

export class RoleRevoked__Params {
  _event: RoleRevoked;

  constructor(event: RoleRevoked) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class withdrawBurn extends ethereum.Event {
  get params(): withdrawBurn__Params {
    return new withdrawBurn__Params(this);
  }
}

export class withdrawBurn__Params {
  _event: withdrawBurn;

  constructor(event: withdrawBurn) {
    this._event = event;
  }

  get _from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class CacheGoldChild extends ethereum.SmartContract {
  static bind(address: Address): CacheGoldChild {
    return new CacheGoldChild("CacheGoldChild", address);
  }

  DEFAULT_ADMIN_ROLE(): Bytes {
    let result = super.call(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DEFAULT_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  FEE_ENFORCER_ROLE(): Bytes {
    let result = super.call(
      "FEE_ENFORCER_ROLE",
      "FEE_ENFORCER_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_FEE_ENFORCER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "FEE_ENFORCER_ROLE",
      "FEE_ENFORCER_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  INACTIVE_THRESHOLD_DAYS(): BigInt {
    let result = super.call(
      "INACTIVE_THRESHOLD_DAYS",
      "INACTIVE_THRESHOLD_DAYS():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_INACTIVE_THRESHOLD_DAYS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "INACTIVE_THRESHOLD_DAYS",
      "INACTIVE_THRESHOLD_DAYS():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, value: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(value)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, value: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(value)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfNoFees(owner: Address): BigInt {
    let result = super.call(
      "balanceOfNoFees",
      "balanceOfNoFees(address):(uint256)",
      [ethereum.Value.fromAddress(owner)]
    );

    return result[0].toBigInt();
  }

  try_balanceOfNoFees(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOfNoFees",
      "balanceOfNoFees(address):(uint256)",
      [ethereum.Value.fromAddress(owner)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calcInactiveFee(account: Address): BigInt {
    let result = super.call(
      "calcInactiveFee",
      "calcInactiveFee(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_calcInactiveFee(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calcInactiveFee",
      "calcInactiveFee(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calcOwedFees(account: Address): BigInt {
    let result = super.call("calcOwedFees", "calcOwedFees(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_calcOwedFees(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calcOwedFees",
      "calcOwedFees(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calcStorageFee(account: Address): BigInt {
    let result = super.call(
      "calcStorageFee",
      "calcStorageFee(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_calcStorageFee(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calcStorageFee",
      "calcStorageFee(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calcTransferFee(account: Address, value: BigInt): BigInt {
    let result = super.call(
      "calcTransferFee",
      "calcTransferFee(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(value)
      ]
    );

    return result[0].toBigInt();
  }

  try_calcTransferFee(
    account: Address,
    value: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calcTransferFee",
      "calcTransferFee(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(value)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  connectedToken(): Address {
    let result = super.call("connectedToken", "connectedToken():(address)", []);

    return result[0].toAddress();
  }

  try_connectedToken(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "connectedToken",
      "connectedToken():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  daysSinceActivity(account: Address): BigInt {
    let result = super.call(
      "daysSinceActivity",
      "daysSinceActivity(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_daysSinceActivity(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "daysSinceActivity",
      "daysSinceActivity(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  daysSincePaidStorageFee(account: Address): BigInt {
    let result = super.call(
      "daysSincePaidStorageFee",
      "daysSincePaidStorageFee(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_daysSincePaidStorageFee(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "daysSincePaidStorageFee",
      "daysSincePaidStorageFee(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  decreaseAllowance(spender: Address, subtractedValue: BigInt): boolean {
    let result = super.call(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_decreaseAllowance(
    spender: Address,
    subtractedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  forcePayFees(account: Address): boolean {
    let result = super.call("forcePayFees", "forcePayFees(address):(bool)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_forcePayFees(account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("forcePayFees", "forcePayFees(address):(bool)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  fxManager(): Address {
    let result = super.call("fxManager", "fxManager():(address)", []);

    return result[0].toAddress();
  }

  try_fxManager(): ethereum.CallResult<Address> {
    let result = super.tryCall("fxManager", "fxManager():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getFeeAddress(): Address {
    let result = super.call("getFeeAddress", "getFeeAddress():(address)", []);

    return result[0].toAddress();
  }

  try_getFeeAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getFeeAddress",
      "getFeeAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getRoleAdmin(role: Bytes): Bytes {
    let result = super.call("getRoleAdmin", "getRoleAdmin(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(role)
    ]);

    return result[0].toBytes();
  }

  try_getRoleAdmin(role: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getRoleAdmin",
      "getRoleAdmin(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  hasRole(role: Bytes, account: Address): boolean {
    let result = super.call("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_hasRole(role: Bytes, account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  increaseAllowance(spender: Address, addedValue: BigInt): boolean {
    let result = super.call(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_increaseAllowance(
    spender: Address,
    addedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isAllFeeExempt(account: Address): boolean {
    let result = super.call(
      "isAllFeeExempt",
      "isAllFeeExempt(address):(bool)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBoolean();
  }

  try_isAllFeeExempt(account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isAllFeeExempt",
      "isAllFeeExempt(address):(bool)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isInactive(account: Address): boolean {
    let result = super.call("isInactive", "isInactive(address):(bool)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_isInactive(account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isInactive", "isInactive(address):(bool)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isStorageFeeExempt(account: Address): boolean {
    let result = super.call(
      "isStorageFeeExempt",
      "isStorageFeeExempt(address):(bool)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBoolean();
  }

  try_isStorageFeeExempt(account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isStorageFeeExempt",
      "isStorageFeeExempt(address):(bool)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isTransferFeeExempt(account: Address): boolean {
    let result = super.call(
      "isTransferFeeExempt",
      "isTransferFeeExempt(address):(bool)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBoolean();
  }

  try_isTransferFeeExempt(account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isTransferFeeExempt",
      "isTransferFeeExempt(address):(bool)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  maximumTransferAmount(account: Address): BigInt {
    let result = super.call(
      "maximumTransferAmount",
      "maximumTransferAmount(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_maximumTransferAmount(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maximumTransferAmount",
      "maximumTransferAmount(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  payStorageFee(): boolean {
    let result = super.call("payStorageFee", "payStorageFee():(bool)", []);

    return result[0].toBoolean();
  }

  try_payStorageFee(): ethereum.CallResult<boolean> {
    let result = super.tryCall("payStorageFee", "payStorageFee():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  redeemAddress(): Address {
    let result = super.call("redeemAddress", "redeemAddress():(address)", []);

    return result[0].toAddress();
  }

  try_redeemAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "redeemAddress",
      "redeemAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  setAccountInactive(account: Address): boolean {
    let result = super.call(
      "setAccountInactive",
      "setAccountInactive(address):(bool)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBoolean();
  }

  try_setAccountInactive(account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "setAccountInactive",
      "setAccountInactive(address):(bool)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  setFeeAddress(newFeeAddress: Address): boolean {
    let result = super.call("setFeeAddress", "setFeeAddress(address):(bool)", [
      ethereum.Value.fromAddress(newFeeAddress)
    ]);

    return result[0].toBoolean();
  }

  try_setFeeAddress(newFeeAddress: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "setFeeAddress",
      "setFeeAddress(address):(bool)",
      [ethereum.Value.fromAddress(newFeeAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  setRedeemAddress(newRedeemAddress: Address): boolean {
    let result = super.call(
      "setRedeemAddress",
      "setRedeemAddress(address):(bool)",
      [ethereum.Value.fromAddress(newRedeemAddress)]
    );

    return result[0].toBoolean();
  }

  try_setRedeemAddress(
    newRedeemAddress: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "setRedeemAddress",
      "setRedeemAddress(address):(bool)",
      [ethereum.Value.fromAddress(newRedeemAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  storageFee(balance: BigInt, daysSinceStoragePaid: BigInt): BigInt {
    let result = super.call(
      "storageFee",
      "storageFee(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(balance),
        ethereum.Value.fromUnsignedBigInt(daysSinceStoragePaid)
      ]
    );

    return result[0].toBigInt();
  }

  try_storageFee(
    balance: BigInt,
    daysSinceStoragePaid: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "storageFee",
      "storageFee(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(balance),
        ethereum.Value.fromUnsignedBigInt(daysSinceStoragePaid)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  storageFeeGracePeriodDays(): BigInt {
    let result = super.call(
      "storageFeeGracePeriodDays",
      "storageFeeGracePeriodDays():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_storageFeeGracePeriodDays(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "storageFeeGracePeriodDays",
      "storageFeeGracePeriodDays():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalCirculation(): BigInt {
    let result = super.call(
      "totalCirculation",
      "totalCirculation():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalCirculation(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalCirculation",
      "totalCirculation():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(to: Address, value: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(value)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(to: Address, value: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(value)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFeeBasisPoints(): BigInt {
    let result = super.call(
      "transferFeeBasisPoints",
      "transferFeeBasisPoints():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_transferFeeBasisPoints(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "transferFeeBasisPoints",
      "transferFeeBasisPoints():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transferFrom(from: Address, to: Address, value: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(value)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    from: Address,
    to: Address,
    value: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(value)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }
}

export class DecreaseAllowanceCall extends ethereum.Call {
  get inputs(): DecreaseAllowanceCall__Inputs {
    return new DecreaseAllowanceCall__Inputs(this);
  }

  get outputs(): DecreaseAllowanceCall__Outputs {
    return new DecreaseAllowanceCall__Outputs(this);
  }
}

export class DecreaseAllowanceCall__Inputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get subtractedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseAllowanceCall__Outputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ForcePayFeesCall extends ethereum.Call {
  get inputs(): ForcePayFeesCall__Inputs {
    return new ForcePayFeesCall__Inputs(this);
  }

  get outputs(): ForcePayFeesCall__Outputs {
    return new ForcePayFeesCall__Outputs(this);
  }
}

export class ForcePayFeesCall__Inputs {
  _call: ForcePayFeesCall;

  constructor(call: ForcePayFeesCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ForcePayFeesCall__Outputs {
  _call: ForcePayFeesCall;

  constructor(call: ForcePayFeesCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class GrantRoleCall extends ethereum.Call {
  get inputs(): GrantRoleCall__Inputs {
    return new GrantRoleCall__Inputs(this);
  }

  get outputs(): GrantRoleCall__Outputs {
    return new GrantRoleCall__Outputs(this);
  }
}

export class GrantRoleCall__Inputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class GrantRoleCall__Outputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }
}

export class IncreaseAllowanceCall extends ethereum.Call {
  get inputs(): IncreaseAllowanceCall__Inputs {
    return new IncreaseAllowanceCall__Inputs(this);
  }

  get outputs(): IncreaseAllowanceCall__Outputs {
    return new IncreaseAllowanceCall__Outputs(this);
  }
}

export class IncreaseAllowanceCall__Inputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get addedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseAllowanceCall__Outputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get __feeAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get __feeEnforcer(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get __fxManager_(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get __connectedToken(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get __redeemAddress(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }
}

export class PayStorageFeeCall extends ethereum.Call {
  get inputs(): PayStorageFeeCall__Inputs {
    return new PayStorageFeeCall__Inputs(this);
  }

  get outputs(): PayStorageFeeCall__Outputs {
    return new PayStorageFeeCall__Outputs(this);
  }
}

export class PayStorageFeeCall__Inputs {
  _call: PayStorageFeeCall;

  constructor(call: PayStorageFeeCall) {
    this._call = call;
  }
}

export class PayStorageFeeCall__Outputs {
  _call: PayStorageFeeCall;

  constructor(call: PayStorageFeeCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class RenounceRoleCall extends ethereum.Call {
  get inputs(): RenounceRoleCall__Inputs {
    return new RenounceRoleCall__Inputs(this);
  }

  get outputs(): RenounceRoleCall__Outputs {
    return new RenounceRoleCall__Outputs(this);
  }
}

export class RenounceRoleCall__Inputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RenounceRoleCall__Outputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }
}

export class RevokeRoleCall extends ethereum.Call {
  get inputs(): RevokeRoleCall__Inputs {
    return new RevokeRoleCall__Inputs(this);
  }

  get outputs(): RevokeRoleCall__Outputs {
    return new RevokeRoleCall__Outputs(this);
  }
}

export class RevokeRoleCall__Inputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RevokeRoleCall__Outputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }
}

export class SetAccountInactiveCall extends ethereum.Call {
  get inputs(): SetAccountInactiveCall__Inputs {
    return new SetAccountInactiveCall__Inputs(this);
  }

  get outputs(): SetAccountInactiveCall__Outputs {
    return new SetAccountInactiveCall__Outputs(this);
  }
}

export class SetAccountInactiveCall__Inputs {
  _call: SetAccountInactiveCall;

  constructor(call: SetAccountInactiveCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetAccountInactiveCall__Outputs {
  _call: SetAccountInactiveCall;

  constructor(call: SetAccountInactiveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SetFeeAddressCall extends ethereum.Call {
  get inputs(): SetFeeAddressCall__Inputs {
    return new SetFeeAddressCall__Inputs(this);
  }

  get outputs(): SetFeeAddressCall__Outputs {
    return new SetFeeAddressCall__Outputs(this);
  }
}

export class SetFeeAddressCall__Inputs {
  _call: SetFeeAddressCall;

  constructor(call: SetFeeAddressCall) {
    this._call = call;
  }

  get newFeeAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetFeeAddressCall__Outputs {
  _call: SetFeeAddressCall;

  constructor(call: SetFeeAddressCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SetFeeExemptCall extends ethereum.Call {
  get inputs(): SetFeeExemptCall__Inputs {
    return new SetFeeExemptCall__Inputs(this);
  }

  get outputs(): SetFeeExemptCall__Outputs {
    return new SetFeeExemptCall__Outputs(this);
  }
}

export class SetFeeExemptCall__Inputs {
  _call: SetFeeExemptCall;

  constructor(call: SetFeeExemptCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetFeeExemptCall__Outputs {
  _call: SetFeeExemptCall;

  constructor(call: SetFeeExemptCall) {
    this._call = call;
  }
}

export class SetFxManagerCall extends ethereum.Call {
  get inputs(): SetFxManagerCall__Inputs {
    return new SetFxManagerCall__Inputs(this);
  }

  get outputs(): SetFxManagerCall__Outputs {
    return new SetFxManagerCall__Outputs(this);
  }
}

export class SetFxManagerCall__Inputs {
  _call: SetFxManagerCall;

  constructor(call: SetFxManagerCall) {
    this._call = call;
  }

  get __fxManager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetFxManagerCall__Outputs {
  _call: SetFxManagerCall;

  constructor(call: SetFxManagerCall) {
    this._call = call;
  }
}

export class SetRedeemAddressCall extends ethereum.Call {
  get inputs(): SetRedeemAddressCall__Inputs {
    return new SetRedeemAddressCall__Inputs(this);
  }

  get outputs(): SetRedeemAddressCall__Outputs {
    return new SetRedeemAddressCall__Outputs(this);
  }
}

export class SetRedeemAddressCall__Inputs {
  _call: SetRedeemAddressCall;

  constructor(call: SetRedeemAddressCall) {
    this._call = call;
  }

  get newRedeemAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetRedeemAddressCall__Outputs {
  _call: SetRedeemAddressCall;

  constructor(call: SetRedeemAddressCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SetStorageFeeExemptCall extends ethereum.Call {
  get inputs(): SetStorageFeeExemptCall__Inputs {
    return new SetStorageFeeExemptCall__Inputs(this);
  }

  get outputs(): SetStorageFeeExemptCall__Outputs {
    return new SetStorageFeeExemptCall__Outputs(this);
  }
}

export class SetStorageFeeExemptCall__Inputs {
  _call: SetStorageFeeExemptCall;

  constructor(call: SetStorageFeeExemptCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetStorageFeeExemptCall__Outputs {
  _call: SetStorageFeeExemptCall;

  constructor(call: SetStorageFeeExemptCall) {
    this._call = call;
  }
}

export class SetStorageFeeGracePeriodDaysCall extends ethereum.Call {
  get inputs(): SetStorageFeeGracePeriodDaysCall__Inputs {
    return new SetStorageFeeGracePeriodDaysCall__Inputs(this);
  }

  get outputs(): SetStorageFeeGracePeriodDaysCall__Outputs {
    return new SetStorageFeeGracePeriodDaysCall__Outputs(this);
  }
}

export class SetStorageFeeGracePeriodDaysCall__Inputs {
  _call: SetStorageFeeGracePeriodDaysCall;

  constructor(call: SetStorageFeeGracePeriodDaysCall) {
    this._call = call;
  }

  get daysGracePeriod(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetStorageFeeGracePeriodDaysCall__Outputs {
  _call: SetStorageFeeGracePeriodDaysCall;

  constructor(call: SetStorageFeeGracePeriodDaysCall) {
    this._call = call;
  }
}

export class SetTransferFeeBasisPointsCall extends ethereum.Call {
  get inputs(): SetTransferFeeBasisPointsCall__Inputs {
    return new SetTransferFeeBasisPointsCall__Inputs(this);
  }

  get outputs(): SetTransferFeeBasisPointsCall__Outputs {
    return new SetTransferFeeBasisPointsCall__Outputs(this);
  }
}

export class SetTransferFeeBasisPointsCall__Inputs {
  _call: SetTransferFeeBasisPointsCall;

  constructor(call: SetTransferFeeBasisPointsCall) {
    this._call = call;
  }

  get fee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetTransferFeeBasisPointsCall__Outputs {
  _call: SetTransferFeeBasisPointsCall;

  constructor(call: SetTransferFeeBasisPointsCall) {
    this._call = call;
  }
}

export class SetTransferFeeExemptCall extends ethereum.Call {
  get inputs(): SetTransferFeeExemptCall__Inputs {
    return new SetTransferFeeExemptCall__Inputs(this);
  }

  get outputs(): SetTransferFeeExemptCall__Outputs {
    return new SetTransferFeeExemptCall__Outputs(this);
  }
}

export class SetTransferFeeExemptCall__Inputs {
  _call: SetTransferFeeExemptCall;

  constructor(call: SetTransferFeeExemptCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetTransferFeeExemptCall__Outputs {
  _call: SetTransferFeeExemptCall;

  constructor(call: SetTransferFeeExemptCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class UnsetFeeExemptCall extends ethereum.Call {
  get inputs(): UnsetFeeExemptCall__Inputs {
    return new UnsetFeeExemptCall__Inputs(this);
  }

  get outputs(): UnsetFeeExemptCall__Outputs {
    return new UnsetFeeExemptCall__Outputs(this);
  }
}

export class UnsetFeeExemptCall__Inputs {
  _call: UnsetFeeExemptCall;

  constructor(call: UnsetFeeExemptCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UnsetFeeExemptCall__Outputs {
  _call: UnsetFeeExemptCall;

  constructor(call: UnsetFeeExemptCall) {
    this._call = call;
  }
}
